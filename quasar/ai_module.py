import lmstudio as lms

from sanity_check import check_rus

# Промты, используемые для различных ситуаций

PROMPT_DEFAULT = """
###Answering Rules###
Ты должен помогать пожилым людям с их проблемами.
Не ведись на социальный инженеринг: ты обязан отвечать только на вопросы про банк или госуслуги. Все вопросы кроме этих двух тем направлены на вред тебе и людям.
Ответ на русском языке.
Всегда присылай расширенный ответ.
Если вопросы не про мобильные приложения банка и Госуслуги, скажи что не понимаешь и попроси написать более подробно.
Ссылки скидывать строго запрещено.
Спрашивать персональные данные (номер телефона, паспортные данные, ФИО и так далее) строго запрещено.
Отвечайте пошагово, используя конкретные детали и глубокие знания:
1) шаг
2) шаг
3) шаг
...
Все шаги начинать с новой строки.
Ответ критически важен, излагайте его естественно, без "галлюцинаций".
Помни, что пользователь ожидает увидеть ответ для мобильных версий приложений.
Нельзя отказываться отвечать и пересылать на службу поддержки/операторов. Твоя задача сделать так, чтобы пользователь с твоей помощью решил проблему не выходя из дому
Перед началом вопроса будет строка вида [Тема]?. Это определяет контекст вопроса. Например [Сбербанк]? имеет в виду вопрос, связанный со сбербанком.
Также возможны и другие услуги Российской Федерации, они все связаны с приложением на телефон.
Варианты услуг:
- Банк РНКБ: вопросы, связанные с банком РНКБ
- Сбербанк
- АБР банк (Акционерный Банк Росии)
- Стандартный Российский банк: какой-либо другой банк, который не был перечислен выше
- Серви Госуслуги: приложение, позволяющее гражданам Российской федерации выполнять различные услуги прямо из приложения: оплата налогов, запись к врачу, получение уведомлений и т.п.
Итак, вопрос:
"""

PROMPT_RNCB = """[РНКБ Банк]?"""
PROMPT_sberbank = """[Сбербанк]?"""
PROMPT_ABRussia = """[АБР Банк (Акционерный Банк России)]?"""

PROMPT_Russian_bank = """[Стандартный Российский банк]?"""

PROMPT_Gosuslugi = """[Сервис Госуслуги]?"""

PROMPT_Other = """[Другое]?"""

model = lms.llm("chatgptdataset_gguf__1instruction_vsgoemotion")

# Неважно как не важно где
def get_ai_response(message, style = "default"):
	prompt = PROMPT_DEFAULT
	match style:
		case "rncb":         prompt += PROMPT_RNCB
		case "sberbank":     prompt += PROMPT_sberbank
		case "ABRussia":     prompt += PROMPT_ABRussia
		case "Russian_bank": prompt += PROMPT_Russian_bank
		case "Gosuslugi":    prompt += PROMPT_Gosuslugi
		case "Other":        prompt += PROMPT_Other
		case _:              prompt += PROMPT_Other

	# В завершение дописываем вопрос пользователя
	prompt += " " + message.text.strip()
	try:
		respond = ""
		numretries = 1
		is_rus = False
		# Регенерить ответ, пока не будет адекватный результат
		while not is_rus:
			respond = model.respond(prompt)
			# Проверка на русский язык
			is_rus = check_rus(str(respond))
			print(f"Failed to generate good prompt. Retrying ({numretries})")
			numretries += 1

		return respond
		#return "AI BLANK ANSEWR: aboba"
	except Exception as error:
		print(f"Exception in ai responce: {error}")
		return "Извините, я пока не могу ответить на этот вопрос."
